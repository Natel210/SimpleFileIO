name: Main Push CI/CD

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

env:
  SOLUTION_FILE: "SimpleFileIO.sln"
  DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
  TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"
  BUILD_PATH: "./build"
  RESULT_ZIP_NAME: "Produced Dll"

jobs:

  info:
    name: Info
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check ENV Value
        uses: ./.github/actions/info/env-check
        with:
          config: |
            {
              "Event Name": "${{ github.event_name }}",
              "Ref": "${{ github.ref }}",
              "Head Ref": "${{ github.head_ref }}",
              "Base Ref": "${{ github.base_ref }}",
              "Solution File": "${{ env.SOLUTION_FILE }}",
              "Dll File": "${{ env.DLL_FILE }}",
              "Tester file": "${{ env.TESTER_FILE }}"
            }
      - name: Git Info
        uses: ./.github/actions/info/git
        with:
          event_name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          head_ref: ${{ github.head_ref }}
          base_ref: ${{ github.base_ref }}
      - name: Exist Files
        uses: ./.github/actions/info/exist-files
        with:
          files: ${{ env.SOLUTION_FILE }} ${{ env.DLL_FILE }} ${{ env.TESTER_FILE }}
          
  windows-debug-ci:
    name: Windows Debug CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Debug"
          dotnet_version: "8.0.x"

  windows-release-ci:
    name: Windows Release CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  linux-debug-ci:
    name: Linux Debug CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Debug"
          dotnet_version: "8.0.x"
  
  linux-release-ci:
    name: Linux Release CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  check-event:
    name: Check Event
    needs: [windows-debug-ci, windows-release-ci, linux-debug-ci, linux-release-ci]
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Is Push Event
        run: echo -e "\033[32mPush Ok...\033[0m Continue to Create Tag..."

  create-tag:
    name: Create Tag
    needs: check-event
    runs-on: ubuntu-latest
    concurrency:
      group: tag-creation
      cancel-in-progress: false
    outputs:
      create_new_versuion: ${{ env.NEW_VERSION  }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Before Check Tags
        uses: ./.github/actions/tag/version/check
        with:
          prefix: "v"

      - name: Create Tag
        id: create-tag
        uses: ./.github/actions/tag/version/create
        with:
          prefix: "v"

      - name: After Check Tags
        uses: ./.github/actions/tag/version/check
        with:
          prefix: "v"

  update-version:
    name: Update Version Info
    needs: create-tag
    runs-on: ubuntu-latest
    outputs:
      updated_commit: ${{ steps.commit.outputs.commit_hash }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Get Current Commit Hash
        id: commit_hash
        run: |
          CURRENT_HASH=$(git rev-parse --short HEAD)
          echo "Current Commit Hash: $CURRENT_HASH"
          echo "commit_hash=$CURRENT_HASH" >> $GITHUB_ENV
  
      - name: Update .csproj Files with Version and Commit Hash
        run: |
          VERSION=${{ needs.create-tag.outputs.create_new_versuion }}
          HASH=${{ env.commit_hash }}
          
          # Update SimpleFileIO.csproj
          sed -i "s|<Version>.*</Version>|<Version>$VERSION</Version>|g" SimpleFileIO/SimpleFileIO.csproj
          sed -i "s|<CommitHash>.*</CommitHash>|<CommitHash>$HASH</CommitHash>|g" SimpleFileIO/SimpleFileIO.csproj
  
          # Update SimpleFileIO_Tester.csproj
          sed -i "s|<Version>.*</Version>|<Version>$VERSION</Version>|g" SimpleFileIO_Tester/SimpleFileIO_Tester.csproj
          sed -i "s|<CommitHash>.*</CommitHash>|<CommitHash>$HASH</CommitHash>|g" SimpleFileIO_Tester/SimpleFileIO_Tester.csproj
  
      - name: Update and Commit Changes
        id: commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # Check if .csproj files are updated
          echo "Checking .csproj files..."
          cat SimpleFileIO/SimpleFileIO.csproj
          cat SimpleFileIO_Tester/SimpleFileIO_Tester.csproj
          
          # Add and commit changes if they exist
          git add SimpleFileIO/SimpleFileIO.csproj SimpleFileIO_Tester/SimpleFileIO_Tester.csproj
          if git diff --cached --exit-code; then
            echo "No changes to commit."
          else
            git commit -m "Update version and commit hash to ${{ needs.create-tag.outputs.create_new_versuion }} (${{ env.commit_hash }})"
            git push
          fi
          
          # Get the current commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

  cd:
    name: CD
    needs: update-version
    runs-on: ubuntu-latest
    env:
      CREATE_NEW_VERSION: ${{ needs.create-tag.outputs.create_new_versuion }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Current Tag
        run: |
          echo "Current VERSION: ${{ env.CREATE_NEW_VERSION }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ env.SOLUTION_FILE }}" --no-cache

      - name: Build Debug
        uses: ./.github/actions/build/linux/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Debug"
          dotnet_version: "8.0.x"

      - name: Build Release
        uses: ./.github/actions/build/linux/dotnet/dll
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          build_path: ${{ env.BUILD_PATH }}
          configuration: "Release"
          dotnet_version: "8.0.x"

      - name: Zip Build File
        uses: ./.github/actions/deploy/build-result-as-zip
        with:
          build_path: ${{ env.BUILD_PATH }}
          result_zip_name: ${{ env.RESULT_ZIP_NAME }}

      - name: Generate Changelog
        id: generate_changelog
        run: |
          git fetch --all
      
          base_ref=${{ github.base_ref }}
          head_sha=${{ github.sha }}
      
          if [ -z "$base_ref" ]; then
            # If base_ref is not provided, fallback to the previous commit
            base_ref=$(git rev-parse HEAD^)
          fi
      
          # Generate the changelog with commit title, hyperlinked hash, and body
          changelog=$(git log $base_ref..$head_sha --pretty=format:"%s [#%h](https://github.com/${{ github.repository }}/commit/%H)%n------------------------%n%b" --no-merges)
      
          if [ -z "$changelog" ]; then
            echo "No changes to log."
            changelog="No changes available for this release."
          fi
      
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$changelog" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CREATE_NEW_VERSION }}
          name: Release ${{ env.CREATE_NEW_VERSION }}
          body: ${{ env.CHANGELOG }}
          files: ${{ env.BUILD_PATH }}/${{ env.RESULT_ZIP_NAME }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHANGELOG: ${{ env.CHANGELOG }}