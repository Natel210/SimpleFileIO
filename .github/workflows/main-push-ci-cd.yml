name: Main Push CI/CD

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

jobs:

  info-and-check:
    name: Info And Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Info And Check
        id: info
        uses: ./.github/actions/info
        with:
          # solution & project
          solution_file_path: "${{ vars.SOLUTION_FILE_PATH }}"
          dll_project_file_path: "${{ vars.DLL_PROJECT_FILE_PATH }}"
          build_directory_path: "${{ vars.BUILD_DIRECTORY_PATH }}"
          tester_project_file_path: "${{ vars.TESTER_PROJECT_FILE_PATH }}"
          tester_executable_file_name: "${{ vars.TESTER_EXECUTABLE_FILE_NAME }}"
          # git
          git_event_name: "${{ github.event_name }}"
          git_ref: "${{ github.ref }}"
          head_ref: "${{ github.head_ref }}"
          base_ref: "${{ github.base_ref }}"
          # else
          result_zip_name: "${{ vars.RESULT_ZIP_NAME }}"
          tag_prefix: "${{ vars.TAG_PREFIX }}"
      
      - name: Test
        run: |
          # cat $GITHUB_OUTPUT
          echo -e "${{ steps.info.outputs.solution_project_value_result }}"
          echo -e "${{ steps.info.outputs.git_value_result }}"
          echo -e "${{ steps.info.outputs.else_value_result }}"
          echo -e "${{ steps.info.outputs.exist_files_result }}"
          echo -e "${{ steps.info.outputs.git_info_result }}"
        

      - uses: actions/upload-artifact@v4
        with:
          name: Info
          path: |
            ./git_info.result
            ./exist_files.result
            ./solution_project_value.result
            ./else_value.result
            ./git_value.result
          if-no-files-found: warn

  build-validation:
    name: Build Validation
    needs: info-and-check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        configuration: [Debug, Release]
    steps:
      - uses: actions/checkout@v4
      - name: Dll Build Test
        uses: ./.github/actions/build-validation/dotnet
        with:
          project_file_path: "${{vars.DLL_PROJECT_FILE_PATH}}"
          build_configuration: "${{matrix.configuration}}"
          dotnet_version: "${{ vars.DOTNET_VERSION }}"

      - uses: actions/upload-artifact@v4
        with:
            name: Build_Validation_${{ runner.os }}_${{ matrix.configuration }}
            path: ./${{ runner.os }}/${{ matrix.configuration }}/build_validation.result
            if-no-files-found: warn
  #create-tag:
  #  name: Create Tag
  #  needs: check-event
  #  runs-on: ubuntu-latest
  #  concurrency:
  #    group: tag-creation
  #    cancel-in-progress: false
  #  env:
  #    NEW_VERSION: ""
  #  outputs:
  #    new_version: ${{ env.NEW_VERSION }}
  #  steps:
  #    - uses: actions/checkout@v4
  #      with:
  #        fetch-depth: 0

  #    - name: Before Check Tags
  #      uses: ./.github/actions/tag/version/check
  #      with:
  #        prefix: ${{ vars.TAG_PREFIX }}

  #    - name: Version Create Tag
  #      uses: ./.github/actions/tag/version/create
  #      with:
  #        prefix: ${{ vars.TAG_PREFIX }}

  #    - name: After Check Tags
  #      uses: ./.github/actions/tag/version/check
  #      with:
  #        prefix: ${{ vars.TAG_PREFIX }}

  results:
    name: Results
    needs: build-validation
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
            name: Info
            path: ./results/info
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
            name: Build_Validation_Linux_Debug
            path: ./results/build_validation/linux/debug
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
            name: Build_Validation_Linux_Release
            path: ./results/build_validation/linux/release
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
            name: Build_Validation_Windows_Debug
            path: ./results/build_validation/windows/debug
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
            name: Build_Validation_Windows_Release
            path: ./results/build_validation/windows/release
        continue-on-error: true

      - name: Merge Value Results
        run: |
          # Merge Value Results

          ################################################################################
          # Create Temp file
          ################################################################################
          temp_file=$(mktemp)

          ################################################################################
          # Apply Solution Project Value
          ################################################################################
          if [ -f ./results/info/solution_project_value.result ]; then
            echo -e "\033[38;5;245m● Solution & Project\033[0m" >> $temp_file
            awk '{printf "\033[38;5;245m - %s\033[0m\n", $0}' ./results/info/solution_project_value.result >> $temp_file
          else
            echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/solution_project_value.result\033[0m" >> $temp_file
            echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/solution_project_value.result\033[0m"
          fi
          
          ################################################################################
          # Apply Git Value
          ################################################################################
          if [ -f ./results/info/git_value.result ]; then
          echo -e "\033[38;5;245m● Git\033[0m" >> $temp_file
          awk '{printf "\033[38;5;245m - %s\033[0m\n", $0}' ./results/info/git_value.result >> $temp_file
          else
          echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/git_value.result\033[0m" >> $temp_file
          echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/git_value.result\033[0m"
          fi

          ################################################################################
          # Apply Else Value
          ################################################################################
          if [ -f ./results/info/else_value.result ]; then
            echo -e "\033[38;5;245m● Else\033[0m" >> $temp_file
            awk '{printf "\033[38;5;245m - %s\033[0m\n", $0}' ./results/info/else_value.result >> $temp_file
          else
            echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/else_value.result\033[0m" >> $temp_file
            echo -e "\033[48;5;52m\033[38;5;196mFile not found: ./results/info/else_value.result\033[0m"
          fi
          
          ################################################################################
          # Ensure result file directory exists
          ################################################################################
          merge_result=./results/info/value.result
          result_dir=$(dirname "$merge_result")
          if [ ! -d "$result_dir" ]; then
              mkdir -p "$result_dir"
          fi
          cp "${temp_file}" "${merge_result}"

          ################################################################################
          # Delete temp file
          ################################################################################
          rm -f "$temp_file"

          ################################################################################
          # Debug
          ################################################################################
          if [ "${{ env.result_to_console }}" = "true" ]; then
          echo -e "\033[48;5;241m\033[38;5;15mDebug : ${merge_result}\033[0m"
          cat $merge_result
          fi
          
        env:
          result_to_console: false
        continue-on-error: true

      - name: Sermary
        run: echo Sermary

      - name: Info
        uses: ./.github/actions/results
        with:
          headers_and_files: >
            [
              {
                "header": "Git Info",
                "path": "./results/info/git_info.result"
              },
              {
                "header": "File Exist",
                "path": "./results/info/exist_files.result"
              },
              {
                "header": "Values",
                "path": "./results/info/value.result"
              }
            ]
          result_file: ./results/info_marge.result
          result_to_console: false
        continue-on-error: true

      - name: Build Validation
        uses: ./.github/actions/results
        with:
          headers_and_files: >
            [
              {
                "header": "Build Validation Linux Debug",
                "path": "./results/build_validation/linux/debug/build_validation.result"
              },
              {
                "header": "Build Validation Linux Release",
                "path": "./results/build_validation/linux/release/build_validation.result"
              },
              {
                "header": "Build Validation Widnows Debug",
                "path": "./results/build_validation/windows/debug/build_validation.result"
              },
              {
                "header": "Build Validation Widnows Release",
                "path": "./results/build_validation/windows/release/build_validation.result"
              }
            ]
          result_file: ./results/build_validation_marge.result
          result_to_console: false
        continue-on-error: true
      - name: Result
        run: |
          cat ./results/info_marge.result
          cat ./results/build_validation_marge.result
        continue-on-error: true

  # check-event:
  #   name: Check Git Event
  #   needs: [windows-debug-ci, windows-release-ci, linux-debug-ci, linux-release-ci]
  #   # needs: [linux-debug-ci, linux-release-ci]
  #   runs-on: ubuntu-latest
  #   if: ${{github.event_name == 'push'}}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Is Push Event
  #       run: echo -e "\033[32mPush Ok...\033[0m Continue to Create Tag..."

  # create-tag:
  #   name: Create Tag
  #   needs: check-event
  #   runs-on: ubuntu-latest
  #   concurrency:
  #     group: tag-creation
  #     cancel-in-progress: false
  #   env:
  #     NEW_VERSION: ""
  #   outputs:
  #     new_version: ${{ env.NEW_VERSION }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Before Check Tags
  #       uses: ./.github/actions/tag/version/check
  #       with:
  #         prefix: ${{ vars.TAG_PREFIX }}

  #     - name: Version Create Tag
  #       uses: ./.github/actions/tag/version/create
  #       with:
  #         prefix: ${{ vars.TAG_PREFIX }}

  #     - name: After Check Tags
  #       uses: ./.github/actions/tag/version/check
  #       with:
  #         prefix: ${{ vars.TAG_PREFIX }}

  # cd:
  #   name: CD
  #   needs: [create-tag]
  #   runs-on: ubuntu-latest
  #   env:
  #     NEW_VERSION: ${{ needs.create-tag.outputs.new_version }}
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:

  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Show Current Tag
  #       run: |
  #         echo "Current VERSION: ${{ vars.TAG_PREFIX }}${{ env.NEW_VERSION }}"

  #     - name: Build Debug
  #       uses: ./.github/actions/build/linux/dotnet/dll
  #       with:
  #         solution_file_path: ${{ vars.SOLUTION_FILE_PATH }}
  #         dll_project_file_path: ${{ vars.DLL_PROJECT_FILE_PATH }}
  #         build_directory_path: ${{ vars.BUILD_DIRECTORY_PATH }}
  #         configuration: "Debug"
  #         dotnet_version: ${{ vars.DOTNET_VERSION }}
  #         assembly_version: ${{ vars.NEW_VERSION }}
  #         file_version: ${{ vars.NEW_VERSION }}
  #         informational_version: ${{ vars.NEW_VERSION }}

  #     - name: Build Release
  #       uses: ./.github/actions/build/linux/dotnet/dll
  #       with:
  #         solution_file_path: ${{ vars.SOLUTION_FILE_PATH }}
  #         dll_project_file_path: ${{ vars.DLL_PROJECT_FILE_PATH }}
  #         build_directory_path: ${{ vars.BUILD_DIRECTORY_PATH }}
  #         configuration: "Release"
  #         dotnet_version: ${{ vars.DOTNET_VERSION }}
  #         assembly_version: ${{ env.NEW_VERSION }}
  #         file_version: ${{ env.NEW_VERSION }}
  #         informational_version: ${{ env.NEW_VERSION }}

  #     - name: Zip Build File
  #       uses: ./.github/actions/deploy/build-result-as-zip
  #       with:
  #         build_directory_path: ${{ vars.BUILD_DIRECTORY_PATH }}
  #         result_zip_name: ${{ vars.RESULT_ZIP_NAME }}

  #     - name: Generate Changelog
  #       id: generate_changelog
  #       run: |
  #         git fetch --all
      
  #         base_ref=${{ github.base_ref }}
  #         head_sha=${{ github.sha }}
      
  #         if [ -z "$base_ref" ]; then
  #           # If base_ref is not provided, fallback to the previous commit
  #           base_ref=$(git rev-parse HEAD^)
  #         fi
      
  #         # Generate the changelog with commit title, hyperlinked hash, and body
  #         changelog=$(git log $base_ref..$head_sha --pretty=format:"%s [#%h](https://github.com/${{ github.repository }}/commit/%H)%n------------------------%n%b" --no-merges)
      
  #         if [ -z "$changelog" ]; then
  #           echo "No changes to log."
  #           changelog="No changes available for this release."
  #         fi
      
  #         echo "CHANGELOG<<EOF" >> $GITHUB_ENV
  #         echo "$changelog" >> $GITHUB_ENV
  #         echo "EOF" >> $GITHUB_ENV
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ vars.TAG_PREFIX }}${{ env.NEW_VERSION }}
  #         name: Release ${{ vars.TAG_PREFIX }}${{ env.NEW_VERSION }}
  #         body: ${{ env.CHANGELOG }}
  #         files: ${{ vars.BUILD_DIRECTORY_PATH }}/${{ vars.RESULT_ZIP_NAME }}.zip
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         CHANGELOG: ${{ env.CHANGELOG }}