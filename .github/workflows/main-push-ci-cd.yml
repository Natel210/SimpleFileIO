name: Main CD
description: Push after

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

concurrency:
  group: main-push
  cancel-in-progress: false

env:
  TAG_PREFIX: "v"

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.update_version.outputs.version }}
    steps:
      - name: Git Check Out
        uses: actions/checkout@v4

      - name: Update Version
        id: update_version
        shell: bash
        run: |
          # Fetch latest tags
          git fetch --tags
          prefix="${{ env.TAG_PREFIX }}"
          latest_version=$(git tag | grep "^$prefix" | grep -E "^$prefix[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n 1 || echo "${prefix}0.0.0")

          if [[ "$latest_version" =~ ^${prefix}([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          else
            new_version="0.0.1"
          fi

          echo "version=$new_version" >> $GITHUB_OUTPUT

      - name: Update Tag
        run: |
          git fetch --tags
          TAG_NAME="${{ env.TAG_PREFIX }}${{ steps.update_version.outputs.version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Deleting it..."
            git push --delete origin "$TAG_NAME"
            git tag -d "$TAG_NAME"
          fi
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

  build:
    runs-on: windows-latest
    needs: versioning
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.X"

      - name: Remove Test Project from Solution
        run: dotnet sln SimpleFileIO.sln remove SimpleFileIO_Tester/SimpleFileIO_Tester.csproj

      - name: Clear NuGet Cache
        run: dotnet nuget locals all --clear

      - name: Restore Only Main Project
        run: dotnet restore SimpleFileIO/SimpleFileIO.csproj

      - name: Build Only Main Project
        run: dotnet build SimpleFileIO/SimpleFileIO.csproj -c Release --no-restore

      - name: Publish Only Main Project
        run: |
          mkdir -p artifacts
          dotnet publish SimpleFileIO/SimpleFileIO.csproj -c Release -o publish_output --no-build
          Compress-Archive -Path publish_output -DestinationPath artifacts/publish_output.zip
        shell: pwsh

      - name: Pack NuGet Package
        run: |
          mkdir -p artifacts
          dotnet pack -c Release -p:Version="${{ needs.versioning.outputs.version }}" -o artifacts
        shell: pwsh

      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: release_package
          path: artifacts/publish_output.zip

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: nuget_package
          path: artifacts/*.nupkg

  release:
    name: GitHub Release & NuGet Publish
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Release Package
        uses: actions/download-artifact@v4
        with:
          name: release_package
          path: artifacts

      - name: Download NuGet Package
        uses: actions/download-artifact@v4
        with:
          name: nuget_package
          path: artifacts

      - name: Github Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          name: ${{ env.TAG_PREFIX }}${{ needs.versioning.outputs.version }}
          body: "Release version ${{ needs.versioning.outputs.version }}"
          files: artifacts/publish_output.zip

      - name: Push NuGet Package
        run: |
          dotnet nuget push "artifacts/*.nupkg" --source "https://api.nuget.org/v3/index.json" --api-key "${{ secrets.NUGET_API_KEY }}" --skip-duplicate
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
