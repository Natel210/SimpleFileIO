name: Main CI/CD

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

env:
  SOLUTION_FILE: "SimpleFileIO.sln"
  DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
  TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"
  BUILD_PATH: "./build/"
  RESULT_ZIP_NAME: "Produced Dll"

jobs:

  info:
    name: Info
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check ENV Value
        uses: ./.github/actions/info/env-check
        with:
          config: |
            {
              "Event Name": "${{ github.event_name }}",
              "Ref": "${{ github.ref }}",
              "Head Ref": "${{ github.head_ref }}",
              "Base Ref": "${{ github.base_ref }}",
              "Solution File": "${{ env.SOLUTION_FILE }}",
              "Dll File": "${{ env.DLL_FILE }}",
              "Tester file": "${{ env.TESTER_FILE }}"
            }
      - name: Git Info
        uses: ./.github/actions/info/git
        with:
          event_name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          head_ref: ${{ github.head_ref }}
          base_ref: ${{ github.base_ref }}
      - name: Exist Files
        uses: ./.github/actions/info/exist-files
        with:
          files: ${{ env.SOLUTION_FILE }} ${{ env.DLL_FILE }} ${{ env.TESTER_FILE }}
          
  windows-debug-ci:
    name: Windows Debug CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll-and-tester
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          configuration: "Debug"
          dotnet_version: "8.0.x"

  windows-release-ci:
    name: Windows Release CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll-and-tester
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  linux-debug-ci:
    name: Linux Debug CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll-and-tester
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          configuration: "Debug"
          dotnet_version: "8.0.x"
  
  linux-release-ci:
    name: Linux Release CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll-and-tester
        with:
          solution_file: ${{ env.SOLUTION_FILE }}
          dll_file: ${{ env.DLL_FILE }}
          tester_file: ${{ env.TESTER_FILE }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  check-event:
    name: Check Event
    needs: [windows-debug-ci, windows-release-ci, linux-debug-ci, linux-release-ci]
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Is Push Event
        run: echo -e "\033[32mPush Ok...\033[0m Continue to Create Tag..."

  create-tag:
    name: Create Tag
    needs: check-event
    runs-on: ubuntu-latest
    concurrency:
      group: tag-creation
      cancel-in-progress: false
    outputs:
      create_new_versuion: ${{ env.NEW_VERSION  }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Before Check Tags
        uses: ./.github/actions/tag/version/check
        with:
          prefix: "v"

      - name: Create Tag
        id: create-tag
        uses: ./.github/actions/tag/version/create
        with:
          prefix: "v"

      - name: debug
        run: |
          echo ${{ steps.create-tag.outputs.new_version }}
          echo ${{ steps.outputs.latest_versuion }}
          echo ${{ env.NEW_VERSION }}

      - name: After Check Tags
        uses: ./.github/actions/tag/version/check
        with:
          prefix: "v"

  cd:
    name: CD
    needs: create-tag
    runs-on: ubuntu-latest
    env:
      CREATE_NEW_VERSION: ${{ needs.create-tag.outputs.create_new_versuion }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Current Tag
        run: |
          echo "Current VERSION: ${{ env.CREATE_NEW_VERSION }}"

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/cd/*.sh

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ env.SOLUTION_FILE }}" --no-cache

      - name: Build Debug
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Debug --no-restore --output "${{ env.BUILD_PATH }}debug"

      - name: Build Release
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Release --no-restore --output "${{ env.BUILD_PATH }}release"

      - name: Zip Build File
        run: .github/workflows/scripts/cd/csharp-build-result-as-zip.sh "${{ env.BUILD_PATH }}" "${{ env.RESULT_ZIP_NAME }}"

      - name: Create GitHub Release
        id: create_github_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.CREATE_NEW_VERSION }}
          name: Release ${{ env.CREATE_NEW_VERSION }}
          body: |
            Release for version ${{ env.CREATE_NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Zip to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_github_release.outputs.upload_url }}
          asset_path: "${{ env.BUILD_PATH }}${{ env.RESULT_ZIP_NAME }}.zip"
          asset_name: "${{ env.RESULT_ZIP_NAME }}.zip"
          asset_content_type: application/zip
