name: CI/CD Workflow

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

jobs:
  ci:
    name: CI Process (Git Info, Build, Test, Tagging, Release)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Git 정보 생성
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Info
        run: |
          echo "Extracting Git Info..."
          ref=${{ github.ref }}
          if [[ "$ref" == refs/heads/* ]]; then
            branch_name=${ref#refs/heads/}
            tag_name="N/A"
          elif [[ "$ref" == refs/tags/* ]]; then
            branch_name="N/A"
            tag_name=${ref#refs/tags/}
          else
            echo "Unknown ref type: $ref"
            exit 1
          fi

          commit_hash=$(git rev-parse HEAD)
          commit_message=$(git log -1 --pretty=format:%s)
          commit_author=$(git log -1 --pretty=format:'%an <%ae>')

          echo "Branch Name      : $branch_name"
          echo "Tag Name         : $tag_name"
          echo "Commit Hash      : $commit_hash"
          echo "Commit Message   : $commit_message"
          echo "Author           : $commit_author"

      # Step 2: .NET 환경 설정
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore SimpleFileIO.sln --no-cache

      # Step 3: Debug 빌드 및 테스트
      - name: Build Debug DLL
        run: dotnet build SimpleFileIO/SimpleFileIO.csproj --configuration Debug --no-restore --output ./build/debug

      - name: Run Debug Unit Tests
        run: dotnet test SimpleFileIO_Tester/SimpleFileIO_Tester.csproj --configuration Debug --no-restore --output ./build/debug --verbosity normal

      # Step 4: Release 빌드 및 테스트
      - name: Build Release DLL
        run: dotnet build SimpleFileIO/SimpleFileIO.csproj --configuration Release --no-restore --output ./build/release

      - name: Run Release Unit Tests
        run: dotnet test SimpleFileIO_Tester/SimpleFileIO_Tester.csproj --configuration Release --no-restore --output ./build/release --verbosity normal

      # Step 5: 압축 빌드 파일 생성
      - name: Zip Debug Build
        run: |
          cd ./build/debug
          zip -r debug_build.zip .
          mv debug_build.zip ../

      - name: Zip Release Build
        run: |
          cd ./build/release
          zip -r release_build.zip .
          mv release_build.zip ../

      # Step 6: 자동 태그 생성
      - name: Get Latest Tag and Create New Tag
        id: create_tag  # ID 추가
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_tag="v$major.$minor.$((patch + 1))"
          else
            new_tag="v0.0.1"
          fi
          echo "New Tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"
          git tag $new_tag
          git push origin $new_tag

      # Step 7: 릴리스 생성
      - name: Create GitHub Release
        id: create_release  # ID 추가
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}  # 자동 생성된 태그 사용
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: |
            ## What's New
            - Automated Release with Debug and Release builds
            - Includes all recent commits
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Debug Build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/debug_build.zip
          asset_name: debug_build.zip
          asset_content_type: application/zip

      - name: Upload Release Build
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/release_build.zip
          asset_name: release_build.zip
          asset_content_type: application/zip
