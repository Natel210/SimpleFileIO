name: Main CI/CD

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

jobs:
  info:
    name: Info
    runs-on: ubuntu-latest
    env:
      EVNET: "${{ github.event_name }}"
      REF: "${{ github.ref }}"
      HEAD_REF: "${{ github.head_ref }}"
      BASE_REF: "${{ github.base_ref }}"
      SOLUTION_FILE: "SimpleFileIO.sln"
      DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
      TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/info/*.sh

      - name: Check ENV Value
        run: .github/workflows/scripts/info/check-env-value.sh  "$EVNET" "$REF" "$HEAD_REF" "$BASE_REF" "$SOLUTION_FILE" "$DLL_FILE" "$TESTER_FILE"

      - name: Git Info
        run: .github/workflows/scripts/info/git-info.sh  "$EVNET" "$REF" "$HEAD_REF" "$BASE_REF"

      - name: Exist Files
        run: .github/workflows/scripts/info/exist-dll-tester-files.sh "$SOLUTION_FILE" "$DLL_FILE" "$TESTER_FILE"

      - name: All Path List
        run: ls -R

  windows-debug-ci:
    name: Windows Debug CI
    runs-on: windows-latest
    needs: info
    env:
      SOLUTION_FILE: "SimpleFileIO.sln"
      DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
      TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ env.SOLUTION_FILE }}" --no-cache

      - name: Build Release Dll
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Debug --no-restore --output ./build/debug

      - name: Run Debug Unit Tests
        run: dotnet test "${{ env.TESTER_FILE }}" --configuration Debug --no-restore --output ./build/debug --verbosity normal

  windows-release-ci:
    name: Windows Release CI
    runs-on: windows-latest
    needs: info
    env:
      SOLUTION_FILE: "SimpleFileIO.sln"
      DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
      TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ env.SOLUTION_FILE }}" --no-cache

      - name: Build Release Dll
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Release --no-restore --output ./build/release

      - name: Run Release Unit Tests
        run: dotnet test "${{ env.TESTER_FILE }}" --configuration Release --no-restore --output ./build/release --verbosity normal

  check-event:
    name: Check Event
    needs: [windows-debug-ci, windows-release-ci]
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Is Push Event
        run: echo "Push Ok... Continue to Create Tag..."

  create-tag:
    name: Create Tag
    needs: check-event
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/create-tag/*.sh
  
      - name: Create Tag
        run: .github/workflows/scripts/create-tag/create-tag.sh

      # Retrieve and export the created tag name
      - name: Get the Latest Tag
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

  cd:
    name: CD
    needs: create-tag
    runs-on: ubuntu-latest
    env:
      SOLUTION_FILE: "SimpleFileIO.sln"
      DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
      BUILD_PATH: "./build/"
      RESULT_ZIP_NAME: "SimpleFileIO"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:



      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout Repository
        run: |
          echo "Current TAG: ${{ env.TAG }}"

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/cd/*.sh

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ env.SOLUTION_FILE }}" --no-cache

      - name: Build Debug
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Debug --no-restore --output "${{ env.BUILD_PATH }}/debug"

      - name: Build Release
        run: dotnet build "${{ env.DLL_FILE }}" --configuration Release --no-restore --output "${{ env.BUILD_PATH }}/release"

      - name: Zip Build File
        run: .github/workflows/scripts/cd/csharp-build-result-as-zip.sh "${{ env.BUILD_PATH }}" "${{ env.RESULT_ZIP_NAME }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.create-tag.outputs.tag }}
          release_name: Release ${{ needs.create-tag.outputs.tag }}
          body: |
            Release for version ${{ needs.create-tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Zip
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: "${{ env.BUILD_PATH }}${{ env.RESULT_ZIP_NAME }}.zip"
          asset_name: "${{ env.RESULT_ZIP_NAME }}.zip"
          asset_content_type: application/zip
