name: Main CI/CD

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      solution_file:
        description: "Solution file path"
        required: true
        default: "SimpleFileIO.sln"
      dll_file:
        description: "DLL file path"
        required: true
        default: "SimpleFileIO/SimpleFileIO.csproj"
      tester_file:
        description: "Tester file path"
        required: true
        default: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"

permissions:
  contents: write
  statuses: write

env:
  BUILD_PATH: "./build/"
  RESULT_ZIP_NAME: "Produced Dll"

jobs:
  info:
    name: Info
    runs-on: ubuntu-latest
    env:
      EVNET_NAME: "${{ github.event_name }}"
      REF: "${{ github.ref }}"
      HEAD_REF: "${{ github.head_ref }}"
      BASE_REF: "${{ github.base_ref }}"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/info/*.sh

      - name: Check ENV Value
        run: .github/workflows/scripts/info/check-env-value.sh  "$EVNET_NAME" "$REF" "$HEAD_REF" "$BASE_REF" "${{ github.event.inputs.solution_file }}" "${{ github.event.inputs.dll_file }}" "${{ github.event.inputs.tester_file }}"

      - name: Git Info
        uses: ./.github/actions/info/git
        with:
          event_name: ${{ env.EVNET_NAME }}
          ref: ${{ env.REF }}
          head_ref: ${{ env.HEAD_REF }}
          base_ref: ${{ env.BASE_REF }}

      - name: Exist Files
        run: ./.github/actions/info/exist-files "${{ github.event.inputs.solution_file }}" "${{ github.event.inputs.dll_file }}" "${{ github.event.inputs.tester_file }}"

      - name: All Path List
        run: ls -R

  windows-debug-ci:
    name: Windows Debug CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll-and-tester
        with:
          solution_file: ${{ github.event.inputs.solution_file }}
          dll_file: ${{ github.event.inputs.dll_file }}
          tester_file: ${{ github.event.inputs.tester_file }}
          configuration: "Debug"
          dotnet_version: "8.0.x"

  windows-release-ci:
    name: Windows Release CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Test
        uses: ./.github/actions/build/windows/dotnet/dll-and-tester
        with:
          solution_file: ${{ github.event.inputs.solution_file }}
          dll_file: ${{ github.event.inputs.dll_file }}
          tester_file: ${{ github.event.inputs.tester_file }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  linux-debug-ci:
    name: Linux Debug CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll-and-tester
        with:
          solution_file: ${{ github.event.inputs.solution_file }}
          dll_file: ${{ github.event.inputs.dll_file }}
          tester_file: ${{ github.event.inputs.tester_file }}
          configuration: "Debug"
          dotnet_version: "8.0.x"
  
  linux-release-ci:
    name: Linux Release CI
    runs-on: ubuntu-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - name: Build and Test
        uses: ./.github/actions/build/linux/dotnet/dll-and-tester
        with:
          solution_file: ${{ github.event.inputs.solution_file }}
          dll_file: ${{ github.event.inputs.dll_file }}
          tester_file: ${{ github.event.inputs.tester_file }}
          configuration: "Release"
          dotnet_version: "8.0.x"

  check-event:
    name: Check Event
    needs: [windows-debug-ci, windows-release-ci, linux-debug-ci, linux-release-ci]
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Is Push Event
        run: echo "Push Ok... Continue to Create Tag..."

  create-tag:
    name: Create Tag
    needs: check-event
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/create-tag/*.sh
  
      - name: Create Tag
        run: .github/workflows/scripts/create-tag/create-tag.sh

      - name: Debug Git Tag
        run: |
          git tag
          git describe --tags --abbrev=0

      - name: Create and Fetch Git Tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "Generated TAG: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "::set-output name=tag::$TAG"

      - name: Debug Tags
        run: |
          echo "Available Tags:"
          git tag

  cd:
    name: CD
    needs: create-tag
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.create-tag.outputs.latest_tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show Current Tag
        run: |
          echo "Current TAG: ${{ env.TAG }}"

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/cd/*.sh

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{ github.event.inputs.solution_file }}" --no-cache

      - name: Build Debug
        run: dotnet build "${{ github.event.inputs.dll_file }}" --configuration Debug --no-restore --output "${{ env.BUILD_PATH }}debug"

      - name: Build Release
        run: dotnet build "${{ github.event.inputs.dll_file }}" --configuration Release --no-restore --output "${{ env.BUILD_PATH }}release"

      - name: Zip Build File
        run: .github/workflows/scripts/cd/csharp-build-result-as-zip.sh "${{ env.BUILD_PATH }}" "${{ env.RESULT_ZIP_NAME }}"

      - name: Create GitHub Release
        id: create_github_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          body: |
            Release for version ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload Zip
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_github_release.outputs.upload_url }}
          asset_path: "${{ env.BUILD_PATH }}${{ env.RESULT_ZIP_NAME }}.zip"
          asset_name: "${{ env.RESULT_ZIP_NAME }}.zip"
          asset_content_type: application/zip
