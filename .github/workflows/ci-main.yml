name: Main CI/CD

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  statuses: write

jobs:
  info:
    name: Info
    runs-on: ubuntu-latest
    env:
      EVNET: "${{ github.event_name }}"
      REF: "${{ github.ref }}"
      HEAD_REF: "${{ github.head_ref }}"
      BASE_REF: "${{ github.base_ref }}"
      SOLUTION_FILE: "SimpleFileIO.sln"
      DLL_FILE: "SimpleFileIO/SimpleFileIO.csproj"
      TESTER_FILE: "SimpleFileIO_Tester/SimpleFileIO_Tester.csproj"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Script Setting
        run: chmod +x .github/workflows/scripts/info/*.sh

      - name: Set Environment Variables
        run: .github/workflows/scripts/info/env-value.sh  "$EVNET" "$REF" "$HEAD_REF" "$BASE_REF" "$SOLUTION_FILE" "$DLL_FILE" "$TESTER_FILE"

      - name: Git Info
        run: .github/workflows/scripts/info/git-info.sh  "$EVNET" "$REF" "$HEAD_REF" "$BASE_REF"

      - name: Exist Files
        run: .github/workflows/scripts/info/exist-dll-tester-files.sh "$SOLUTION_FILE" "$DLL_FILE" "$TESTER_FILE"

      - name: All Path List
        run: |
          ls -R

  windows-ci:
    name: Windows CI
    runs-on: windows-latest
    needs: info
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: dotnet restore SimpleFileIO.sln --no-cache
      - name: Build Debug Dll
        run: dotnet build SimpleFileIO/SimpleFileIO.csproj --configuration Debug --no-restore --output ./build/debug
      - name: Build Release Dll
        run: dotnet build SimpleFileIO/SimpleFileIO.csproj --configuration Release --no-restore --output ./build/release
      - name: Run Debug Unit Tests
        run: dotnet test SimpleFileIO_Tester/SimpleFileIO_Tester.csproj --configuration Debug --no-restore --output ./build/debug --verbosity normal
      - name: Run Release Unit Tests
        run: dotnet test SimpleFileIO_Tester/SimpleFileIO_Tester.csproj --configuration Release --no-restore --output ./build/release --verbosity normal

  create-main-tag:
    name: Create Main Tag
    needs: windows-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag and Create New Tag
        run: |
          echo "Fetching the latest tag..."
          
          # Fetch remote tags to ensure we have the latest state
          git fetch --tags 2>/dev/null
          
          # Get the latest tag or default to v0.0.0
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract version and increment
          if [[ "$latest_tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}

            # Increment the patch version
            new_patch=$((patch + 1))
            new_tag="v$major.$minor.$new_patch"
          else
            # Default to v0.0.1 if no valid tag exists
            new_tag="v0.0.1"
          fi
          
          echo "New tag: $new_tag"
          
          # Create and push the new tag, suppressing success output
          if git tag "$new_tag" 2>/dev/null; then
            if git push origin "$new_tag" 2>/dev/null; then
              echo "New tag $new_tag created and pushed successfully."
            else
              echo "Error: Failed to push the new tag $new_tag to the remote repository." >&2
              exit 1
            fi
          else
            echo "Error: Failed to create the new tag $new_tag locally." >&2
            exit 1
          fi
      