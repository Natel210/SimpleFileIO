name: Results Processor
description: >
  Processes headers and file paths for validation.
inputs:
  headers_and_files:
    description: >
      A JSON string containing header and file path pairs.
      Example: >
        [
          {
            "header": "Git Info",
            "path": "./results/info/git-info.result"
          },
          {
            "header": "File Exist",
            "path": "./results/info/exist-files.result"
          },
          {
            "header": "Values",
            "path": "./results/info/value.result"
          }
        ]
    required: true
  result_to_console:
    required: true
    default: true
  result_file:
    required: false
runs:
  using: "composite"
  steps:
    - run: |
        # Result Make

        ################################################################################
        # Change file mode
        ################################################################################
        chmod +x .scripts/tools/result_output.sh

        ################################################################################
        # Params
        ################################################################################
        headers_and_files='${{ inputs.headers_and_files }}'  # Json 

        ################################################################################
        # Temp file
        ################################################################################
        temp_file=$(mktemp)

        ################################################################################
        # Loop marge sub shell
        ################################################################################
        echo -e "\033[48;5;241m\033[38;5;15mData\033[0m"
        echo $headers_and_files | jq -c '.[]' | while read -r pair; do
          key=$(echo "$pair" | jq -r '.header')
          path=$(echo "$pair" | jq -r '.path')
          echo -e "\033[38;5;245m[${key}] ${path}\033[0m"
          script_output=$( .scripts/tools/result_output.sh "$key" "$path" )
          echo "$script_output" >> "$temp_file"
        done

        ################################################################################
        # Output console
        ################################################################################
        if [ "${{ inputs.result_to_console }}" = "true" ]; then
          echo -e "\033[48;5;241m\033[38;5;15mOutput"
          cat "${temp_file}"
        fi

        ################################################################################
        # Output file
        ################################################################################
        if [ -n "${{ inputs.result_file }}" ]; then
          echo -e "${background_light_gray}${text_white}Save File ${{ inputs.result_file }}${reset}"
          cp "${temp_file}" "${{ inputs.result_file }}"
        fi

        ################################################################################
        # Delete file
        ################################################################################
        rm -f "$temp_file"

        ################################################################################
        # Restore file mode
        ################################################################################
        chmod -x .scripts/tools/result_output.sh

      shell: bash