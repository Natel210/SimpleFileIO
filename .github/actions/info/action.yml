name: Info And Check
description: >
  Check Values
  - Git
  - File Path
  - e.t.c

inputs:
  # solution & project
  solution_file_path:
    description: ""
    required: true
  dll_project_file_path:
    description: ""
    required: true
  build_directory_path:
    description: ""
    required: false
    default: "N/A"
  tester_project_file_path:
    description: ""
    required: false
    default: "N/A"
  tester_executable_file_name:
    description: ""
    required: false
    default: "N/A"

  # git
  git_event_name:
    description: ""
    required: true
  git_ref:
    description: ""
    required: false
    default: "N/A"
  head_ref:
    description: ""
    required: false
    default: "N/A"
  base_ref:
    description: ""
    required: false
    default: "N/A"

  # else
  result_zip_name:
    description: ""
    required: true
  tag_prefix:
    description: ""
    required: true

outputs:
  solution_project_value_result:
    description: solution & project value result
    value: ${{ steps.solution-project-value.outputs.result }}
  git_value_result:
    description: git value result
    value: ${{ steps.git-value.outputs.result }}
  else_value_result:
    description: other value result
    value: ${{ steps.else-value.outputs.result }}
  exist_files_result:
    description: other value result
    value: ${{ steps.exist-files.outputs.result }}
  git_info_result:
    description: other value result
    value: ${{ steps.git-info.outputs.result }}
runs:
  using: "composite"
  steps:
    - name: Add Execute Permission for Scripts
      run: |
        chmod +x ./.scripts/check/values.sh
        chmod +x ./.scripts/check/exist_files.sh
        chmod +x ./.scripts/check/git_info.sh
      shell: bash

    - name: Solution & Project Values
      id: solution-project-value
      run: |
        # Solution & Project Values

        # Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env:
        VALUES: |
          {
            "Solution File Path": "${{ inputs.solution_file_path }}",
            "Dll File Path": "${{ inputs.dll_project_file_path }}",
            "Build Directory Path": "${{ inputs.build_directory_path }}",
            "Tester File Path": "${{ inputs.tester_project_file_path }}",
            "Tester Executable File Name": "${{ inputs.tester_executable_file_name }}"
          }
        RESULT_NAME: result
      shell: bash
      continue-on-error: true

    - name: Git Values
      id: git-value
      run: |
        # Git Values

        # Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        VALUES: |
          {
            "Event": "${{ inputs.git_event_name }}",
            "Ref": "${{ inputs.git_ref }}",
            "Head Ref": "${{ inputs.head_ref }}",
            "Base Ref": "${{ inputs.base_ref }}"
          }
        RESULT_NAME: result
      shell: bash
      continue-on-error: true

    - name: Else Values
      id: else-value
      run: |
        # Else Values

        # Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        VALUES: |
          {
            "Result Zip Name": "${{ inputs.result_zip_name }}",
            "Tag Prefix": "${{ inputs.tag_prefix }}"
          }
        RESULT_NAME: result
      shell: bash
      continue-on-error: true

    - name: Exist Files
      id: exist-files
      run: |
        #Exist Files

        # Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/exist_files.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        VALUES: |
          {
            "Solution File Path": "${{ inputs.solution_file_path }}",
            "Dll File Path": "${{ inputs.dll_project_file_path }}",
            "Build Directory Path": "${{ inputs.build_directory_path }}",
            "Tester Executable File Name": "${{ inputs.tester_project_file_path }}",
            "Tester File Path": "${{ inputs.tester_executable_file_name }}"
          }
        RESULT_NAME: result
      shell: bash
      continue-on-error: true

    - name: Git Info
      id: git-info
      run: |
        #Exist Files

        # Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/git_info.sh "$EVENT_NAME" "$REF" "$HEAD_REF" "$BASE_REF" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        EVENT_NAME: "${{ inputs.git_event_name }}"
        REF: "${{ inputs.git_ref }}"
        HEAD_REF: "${{ inputs.head_ref }}"
        BASE_REF: "${{ inputs.base_ref }}"
        RESULT_NAME: result
      shell: bash
      continue-on-error: true

    - name: Result Debug
      run: |
        echo -e "\033[48;5;241m\033[38;5;15mResult Debug\033[0m"
        echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Solution Project Value"
        echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        echo -e "${{ steps.solution-project-value.outputs.result }}" || echo "::Warning::⚠️ Invalid Solution \& Project Value Result"
        echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Git Value"
        echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        echo -e "${{ steps.git-value.outputs.result }}" || echo "::Warning::⚠️ Invalid Git Value Result"
        echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Else Value"
        echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        echo "${{ steps.else-value.outputs.result }}" || echo "::Warning::⚠️ Invalid Else Value Result"
        echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Exist Files"
        echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        echo "${{ steps.exist-files.outputs.result }}" || echo "::Warning::⚠️ Invalid Exist Files Result"
        echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Git Info"
        echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        echo "${{ steps.git-info.outputs.result }}" || echo "::Warning::⚠️ Invalid Git Info Result"
      shell: bash
      continue-on-error: true

    - name: Remove Execute Permission for Scripts
      run: |
        chmod -x ./.scripts/check/values.sh
        chmod -x ./.scripts/check/exist_files.sh
        chmod -x ./.scripts/check/git_info.sh
      shell: bash
