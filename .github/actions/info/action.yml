name: Info And Check
description: >
  Outputs are saved.
  List:
  - solution_project_value.result
  - git_value.result
  - else_value.result
  - exist_files.result
  - git_info.result

inputs:
  # solution & project
  solution_file_path:
    description: ""
    required: true
  dll_project_file_path:
    description: ""
    required: true
  build_directory_path:
    description: ""
    required: false
    default: "N/A"
  tester_project_file_path:
    description: ""
    required: false
    default: "N/A"
  tester_executable_file_name:
    description: ""
    required: false
    default: "N/A"

  # git
  git_event_name:
    description: ""
    required: true
  git_ref:
    description: ""
    required: false
    default: "N/A"
  head_ref:
    description: ""
    required: false
    default: "N/A"
  base_ref:
    description: ""
    required: false
    default: "N/A"

  # else
  result_zip_name:
    description: ""
    required: true
  tag_prefix:
    description: ""
    required: true


# outputs:
#   solution_project_value_result:
#     description: solution & project value result
#   git_value_result:
#     description: git value result
#   else_value_result:
#     description: other value result
outputs:
  solution_project_value_result:
    description: solution & project value result
    value: ${{ steps.check-solution-project-value.outputs.solution_project_value_result }}
  git_value_result:
    description: git value result
    value: ${{ steps.check-git-value.outputs.git_value_result }}
  else_value_result:
    description: other value result
    value: ${{ steps.check-else-value.outputs.else_value_result }}

# outputs:
#   solution_project_value_result: ${{ steps.check-solution-project-value.outputs.solution_project_value_result }}
#   git_value_result: ${{ steps.check-git-value.outputs.git_value_result }}
#   else_value_result: ${{ steps.check-else-value.outputs.else_value_result }}

runs:
  using: "composite"
  steps:
    - name: Add Execute Permission for Scripts
      run: |
        chmod +x ./.scripts/check/values.sh
        chmod +x ./.scripts/check/exist_files.sh
        chmod +x ./.scripts/check/git_info.sh
      shell: bash

    - name: Check Solution & Project Values
      id: check-solution-project-value
      run: |
        # Check Solution & Project Values

        #Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env:
        VALUES: |
          {
            "Solution File Path": "${{ inputs.solution_file_path }}",
            "Dll File Path": "${{ inputs.dll_project_file_path }}",
            "Build Directory Path": "${{ inputs.build_directory_path }}",
            "Tester File Path": "${{ inputs.tester_project_file_path }}",
            "Tester Executable File Name": "${{ inputs.tester_executable_file_name }}"
          }
        RESULT_NAME: solution_project_value_result
      shell: bash

    - name: Check Git Values
      id: check-git-value
      run: |
        # Check Git Values

        #Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        VALUES: |
          {
            "Event": "${{ inputs.git_event_name }}",
            "Ref": "${{ inputs.git_ref }}",
            "Head Ref": "${{ inputs.head_ref }}",
            "Base Ref": "${{ inputs.base_ref }}"
          }
        RESULT_NAME: git_value_result
      shell: bash

    - name: Check Else Values
      id: check-else-value
      run: |
        # Check Else Values

        #Create Temp
        temp_file=$(mktemp)

        # To Work
        ./.scripts/check/values.sh "$VALUES" "$temp_file"

        # Multi Line
        multi_line_output=$(cat $temp_file)
        echo "$RESULT_NAME<<EOF" >> $GITHUB_OUTPUT
        echo "$multi_line_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Remove Temp
        rm -f "$temp_file"
      env: 
        VALUES: |
          {
            "Result Zip Name": "${{ inputs.result_zip_name }}",
            "Tag Prefix": "${{ inputs.tag_prefix }}"
          }
        RESULT_NAME: else_value_result
      shell: bash

    - name: Check Exist Files
      run: |
        ./.scripts/check/exist_files.sh "$EXIST_FILES_JSON_DATA" "exist_files.result"
      env: 
        EXIST_FILES_JSON_DATA: |
          {
            "Solution File Path": "${{ inputs.solution_file_path }}",
            "Dll File Path": "${{ inputs.dll_project_file_path }}",
            "Build Directory Path": "${{ inputs.build_directory_path }}",
            "Tester Executable File Name": "${{ inputs.tester_project_file_path }}",
            "Tester File Path": "${{ inputs.tester_executable_file_name }}"
          }
      shell: bash

    - name: Check Git Info
      run: |
        ./.scripts/check/git_info.sh "$EVENT_NAME" "$REF" "$HEAD_REF" "$BASE_REF" "git_info.result"
      env: 
        EVENT_NAME: "${{ inputs.git_event_name }}"
        REF: "${{ inputs.git_ref }}"
        HEAD_REF: "${{ inputs.head_ref }}"
        BASE_REF: "${{ inputs.base_ref }}"
      shell: bash

    - name: Result Debug
      run: |
        echo -e "\033[48;5;241m\033[38;5;15mResult Debug\033[0m"
        # echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        # printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Solution Project Value"
        # echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        # echo -e "${{ steps.check-solution-project-value.outputs.solution_project_value_result }}" || echo "::Warning::⚠️ File not found or cannot read: solution_project_value"
        # echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        # printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Git Value"
        # echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        # cat "git_value.result" || echo "::Warning::⚠️ File not found or cannot read: git_value.result"
        # echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        # printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Else Value"
        # echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        # cat "else_value.result" || echo "::Warning::⚠️ File not found or cannot read: else_value.result"
        # echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        # printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Exist Files"
        # echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        # cat "exist_files.result" || echo "::Warning::⚠️ File not found or cannot read: exist_files.result"
        # echo -e "\033[38;5;245m┌──────────────────────────────────────────────────────────────────────────────┐\033[0m"
        # printf "\033[38;5;245m|\033[38;5;15m  %-76s\033[38;5;245m│\033[0m\n" "Git Info"
        # echo -e "\033[38;5;245m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
        # cat "git_info.result" || echo "::Warning::⚠️ File not found or cannot read: git_info.result"
      shell: bash
      continue-on-error: true

    - name: Remove Execute Permission for Scripts
      run: |
        chmod -x ./.scripts/check/values.sh
        chmod -x ./.scripts/check/exist_files.sh
        chmod -x ./.scripts/check/git_info.sh
      shell: bash
