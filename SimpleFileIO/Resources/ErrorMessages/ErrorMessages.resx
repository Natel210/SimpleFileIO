<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="write_deep_copying" xml:space="preserve">
    <value>Deep copy of buffer, exception occurred during initialization</value>
  </data>
  <data name="add_work" xml:space="preserve">
    <value>Exception occurred while adding log</value>
  </data>
  <data name="write_already_writing" xml:space="preserve">
    <value>Already writing</value>
  </data>
  <data name="write_copy_invaild" xml:space="preserve">
    <value>Value is 0 after deep copy when Buffer is non-zero</value>
  </data>
  <data name="path_property_work" xml:space="preserve">
    <value>The following exception occurred during route properties:</value>
  </data>
  <data name="write_task_root_directory_not_found" xml:space="preserve">
    <value>Root directory is Null</value>
  </data>
  <data name="write_task_work" xml:space="preserve">
    <value>Exception occurred during internal operation of Write Task</value>
  </data>
  <data name="write_task_cancellation_token" xml:space="preserve">
    <value>Write Task exception occurs</value>
  </data>
  <data name="clear_work" xml:space="preserve">
    <value>Exception occurred during clearing</value>
  </data>
  <data name="add_different_data_type" xml:space="preserve">
    <value>The previous data format is different from the current format.</value>
  </data>
  <data name="get_value_invalid_item" xml:space="preserve">
    <value>This item does not exist. It is returned as an empty value ("").</value>
  </data>
  <data name="set_value_invaild_section" xml:space="preserve">
    <value>[Key] is empty.</value>
  </data>
  <data name="set_value_invaild_key" xml:space="preserve">
    <value>[Section] is empty.</value>
  </data>
  <data name="set_value_invaild_value" xml:space="preserve">
    <value>[Value] is empty.</value>
  </data>
  <data name="set_value_invalid_item" xml:space="preserve">
    <value>IniItem&lt;string&gt;item is Null.</value>
  </data>
  <data name="save_deep_copying" xml:space="preserve">
    <value>Value is 0 after deep copy when Buffer is non-zero</value>
  </data>
  <data name="save_task_root_directory_not_found" xml:space="preserve">
    <value>Root directory is Null</value>
  </data>
  <data name="save_task_work" xml:space="preserve">
    <value>Exception occurred during internal operation of Save Task</value>
  </data>
  <data name="save_task_cancellation_token" xml:space="preserve">
    <value>Save Task exception occurs</value>
  </data>
  <data name="load_task_work" xml:space="preserve">
    <value>Exception occurred during internal operation of Load Task</value>
  </data>
  <data name="load_task_delete_temp_file" xml:space="preserve">
    <value>A problem occurred when deleting the temp file.</value>
  </data>
  <data name="load_task_cancellation_token" xml:space="preserve">
    <value>Load Task exception occurs</value>
  </data>
  <data name="check_path_property_invaild_root_direcroty" xml:space="preserve">
    <value>Please check the root directory again.</value>
  </data>
  <data name="check_path_property_invaild_file_name" xml:space="preserve">
    <value>The file name is empty.</value>
  </data>
  <data name="check_path_property_invaild_extension" xml:space="preserve">
    <value>The extension name is empty.</value>
  </data>
  <data name="csv_log_array_converter_invalid_type" xml:space="preserve">
    <value>That Tpye is not supported.</value>
  </data>
  <data name="csv_log_array_converter_invalid_array_type" xml:space="preserve">
    <value>Array of the corresponding Tpye is not supported.</value>
  </data>
  <data name="csv_log_array_converter_invalid_list_type" xml:space="preserve">
    <value>List of Tpye is not supported.</value>
  </data>
  <data name="ini_item_invaild_key" xml:space="preserve">
    <value>Key value is invalid.</value>
  </data>
  <data name="ini_item_invaild_section" xml:space="preserve">
    <value>Section value is invalid.</value>
  </data>
  <data name="ini_item_invaild_constructior" xml:space="preserve">
    <value>There is no default constructor.</value>
  </data>
  <data name="ini_item_invaild_value" xml:space="preserve">
    <value>Value is invalid.</value>
  </data>
</root>